"""
Environment Setup Script for DEX Sniper Pro.

Creates configuration directory structure and sets up environment files.

File: setup_environment.py
"""

import secrets
from pathlib import Path


def main():
    """Set up environment configuration files."""
    print("DEX Sniper Pro - Environment Setup")
    print("=" * 40)
    
    # Create config directory
    config_dir = Path("config")
    config_dir.mkdir(exist_ok=True)
    print(f"Created config directory: {config_dir}")
    
    # Create environment validator file
    validator_file = Path("backend/app/core/environment_validator.py")
    print(f"Add environment validator at: {validator_file}")
    print("  (Copy content from the Environment Validation artifact)")
    
    # Check if .env already exists
    env_file = Path(".env")
    if env_file.exists():
        print(f"\nFound existing .env file")
        backup_env = input("Create backup before updating? (y/N): ").strip().lower() == 'y'
        if backup_env:
            backup_name = f".env.backup.{int(__import__('time').time())}"
            env_file.rename(backup_name)
            print(f"Backed up to: {backup_name}")
    
    # Generate secure secrets
    jwt_secret = secrets.token_urlsafe(64)
    encryption_key = secrets.token_urlsafe(64) 
    api_key_1 = "dex_" + secrets.token_urlsafe(48)
    api_key_2 = "dex_" + secrets.token_urlsafe(48)
    
    # Create development .env file
    env_content = f"""# DEX Sniper Pro - Development Environment
# Generated by setup script

# Application
ENVIRONMENT=development
APP_NAME=DEX Sniper Pro
DEBUG=true
VERSION=1.0.0

# Security (Generated secrets)
JWT_SECRET={jwt_secret}
ENCRYPTION_KEY={encryption_key}
API_KEYS={api_key_1},{api_key_2}

# Database
DATABASE_URL=sqlite:///./data/dex_sniper.db
DATABASE_ECHO=false

# Redis
REDIS_URL=redis://localhost:6379/0

# Server
HOST=127.0.0.1
PORT=8000
RELOAD=true

# Logging
LOG_LEVEL=INFO
LOG_RETENTION_DAYS=90

# Trading (Safe defaults)
MAINNET_ENABLED=false
AUTOTRADE_ENABLED=false
MAX_POSITION_SIZE_GBP=100
MAX_DAILY_TRADING_GBP=500

# CORS
CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://localhost:5173,http://127.0.0.1:5173

# RPC Endpoints (Replace with your own)
ETHEREUM_RPC_URL=https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID
BSC_RPC_URL=https://bsc-dataseed.binance.org/
POLYGON_RPC_URL=https://polygon-rpc.com/
"""
    
    with open(".env", "w") as f:
        f.write(env_content)
    
    print(f"\nCreated development .env file with generated secrets")
    
    # Show next steps
    print("\nNext steps:")
    print("1. Save the configuration templates to:")
    print("   - config/env.production.template")
    print("   - config/env.staging.template")
    
    print("\n2. Add environment validator to:")
    print("   - backend/app/core/environment_validator.py")
    
    print("\n3. Update your RPC endpoints in .env file:")
    print("   - Replace YOUR_INFURA_PROJECT_ID with actual key")
    print("   - Consider using your own RPC endpoints")
    
    print("\n4. Test environment validation:")
    print("   python -c \"from backend.app.core.environment_validator import validate_environment; print(validate_environment())\"")
    
    print(f"\nGenerated API keys for testing:")
    print(f"  Key 1: {api_key_1}")
    print(f"  Key 2: {api_key_2}")
    
    print("\nEnvironment setup complete!")


if __name__ == "__main__":
    main()